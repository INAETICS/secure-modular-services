(* INAETICS KP-ABE *)

(**************************************************************************
   Research project involving the integration of Key 
   Policy Attribute Based Encryption into the existing 
   INAETICS modular service architecture.
 **************************************************************************
   Project reference: https://github.com/INAETICS/secure-modular-services
 **************************************************************************)

(* Private channels for the start of modules by the resolver *)
private free secureChannelModule1, secureChannelModule2, Finished.

(* Logging options *)
(* 
param verboseClauses = explained.
param traceDisplay = long.
*)

(* A public channel *)
free c.

(* Crypto definitions *)
fun abencrypt/3. (* Attribute Based encryption *)
fun pk/1.      (* Extracts public key from a master secret key *)
fun attrset/1.      (* Extracts attributes (KP-ABE) from the public key: attrset(pk(Msk)) *)
fun attrpolicy/1.      (* Extracts decryption key from a master secret key: attrpolicy(Msk)*)

(* The cryptographic destructors *)
reduc abdecrypt(abencrypt(pk(y), x, attrset(pk(y))), attrpolicy(y)) = x.

(**************************************************************************
 * Attacker Queries                                                       *
 **************************************************************************)

(* secrecy Master secret ABE*)
query attacker: Msk.
query attacker: policy1.
query attacker: d1.
query attacker: context1.

(* TODO: Query attacker Msk (need to publish pk?))

(* The module entity *)

let module1 =
  (* Discovery information/endpoint *) 
	in(secureChannelModule1, (pubkey, attrs, policy1));

	new d1; (* Discovery information/endpoint *) 
  new context1; (* Discovery context *)


  (* Replication between discovery broadcast and service usage, in parallel. *) 
  !

  (* Service broadcast. *) 
	let x = abencrypt(pubkey, attrs, (d1, context1)) in
		out(c, x) 

  |

  (* Service discovery of another module and usage provided by this module. *) 
  in(c, y); let (d, context) = abdecrypt(y, policy1) in
    new returnAddr; (* Identity to get back on *)
    new serviceReq; (* service request *)
    out(c, (d, returnAddr, serviceReq));
    (* Finalize service call (e.g. use the info) *)
    in(c, z); let (=returnAddr, =serviceReq, serviceRes) = z in
      new FinishedServiceCall; out(Finished, FinishedServiceCall)
    (* FLAG *)

  |

  (* Respond on service request by other module. *) 
  in(c, w); let (=d1, ModReturnAddr, ModServiceReq) = w in
    (* use the service provided by another module *)
    new ModServiceRes; (* service response *)
    out(c, (ModReturnAddr, ModServiceReq, ModServiceRes)).


(* The resolver entity *)
let resolver =
    new Msk; (* Master Secret ABE *)
    let pubkey = pk(Msk) in
      let attrs = attrset(pubkey) in
        let policy1 = attrpolicy(Msk) in
    			out(secureChannelModule1, (pubkey, attrs, policy1)).

(* Execute the process: entities in parallel *)
process
    !resolver | !module1